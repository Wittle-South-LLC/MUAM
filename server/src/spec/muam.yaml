openapi: 3.0.0
info:
  version: 0.1.0
  title: Multimode User Authentication for Microservices
paths:
  /login:
    post:
      summary: Authenticate via Username/Password or Facebook
      tags:
        - Authentication
      description: >
        Authenticate users to the application with either username and password
        in POST data, or Facebook access_token in post data.

        Returns both an HTTP-only cookie and an authentication token
      responses:
        '200':
          description: Successful response
        '400':
          description: Request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Invalid user or password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
  /logout:
    post:
      summary: Remove authentication and exit the application
      tags:
        - Authentication
      description: |
        Ending authentication for a user requires removing a non-expiring token.
        This method will clear the JWT tokens for the application
      responses:
        '200':
          description: Successful response
        '400':
          description: User not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /pw_reset:
    post:
      summary: Requests that a password reset token be sent to the given email address
      tags:
        - Users
      description: >
        Will request a password reset code be sent to the e-mail address
        provided in the form body.

        Will result in an e-mail being sent with an access code. The access code
        will have a 15 minute timeout.

        No new reset codes will be able to be generated for the same email
        address within the timeout window.

        Will generate a refresh token if the email address is valid, the PUT
        verb for this endpoint will require

        a valid refresh token.
      responses:
        '200':
          description: Successful response
        '400':
          description: Request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Email address not found
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  description: User email address for password reset
                  minLength: 4
                  maxLength: 80
        description: Fields required to start password reset
    put:
      summary: >-
        Requests that the user's password be reset. Requires an e-mail address
        that matches the refresh token. Also requires a reset code that has not
        timed out
      tags:
        - Users
      description: >
        Will reset the users password to the requested value if the refresh
        token is valid, matches the email address,

        and the reset code is valid and current.
      responses:
        '200':
          description: Successful response
        '400':
          description: Request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - reset_code
              properties:
                email:
                  type: string
                  description: User email address for password reset
                  minLength: 4
                  maxLength: 80
                password:
                  type: string
                  description: New Password
                  minLength: 8
                  maxLength: 32
                reset_code:
                  type: string
                  description: Reset code
                  minLength: 6
                  maxLength: 6
        description: Fields required to complete password reset
  /shutdown:
    post:
      description: |
        Allows for clean server shutdown.
      tags:
        - Test Utilities
      responses:
        '200':
          description: Server successfully shut down
        '404':
          description: User not authorized to shut down server
      requestBody:
        content:
          application/json:
            schema:
              type: object
              title: ShutdownKey
              properties:
                key:
                  type: string
        description: Unique application key to allow shutdown
  /groups:
    post:
      summary: Create a group
      tags:
        - Groups
      responses:
        '201':
          description: Group successfully added
          content:
            application/json:
              schema:
                type: object
                title: GroupID
                properties:
                  group_id:
                    type: string
        '400':
          description: Request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: One or more group fields that should be unique are duplicated
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
    get:
      summary: Get a list of groups
      tags:
        - Groups
      parameters:
        - $ref: '#/components/parameters/search_text'
      responses:
        '200':
          description: List of groups found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
        '400':
          description: Request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /groups/{group_id}:
    parameters:
      - name: group_id
        description: Group ID (UUID) on which the operation should be performed
        in: path
        required: true
        schema:
          type: string
          minLength: 4
          maxLength: 400
    get:
      summary: Get information for a group by group_id
      tags:
        - Groups
      responses:
        '200':
          description: Group found and details returned successfully
          content:
            applicattion/json:
              schema:
                $ref: '#/components/schemas/GroupFull'
        '400':
          description: Request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Group not found
    put:
      summary: Update a group by group_id
      tags:
        - Groups
      responses:
        '200':
          description: Group updated successfully
        '400':
          description: Request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        required: true
    delete:
      summary: Delete a group by group ID
      tags:
        - Groups
      responses:
        '204':
          description: Group deleted successfully
        '400':
          description: Request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
  /users:
    post:
      summary: Create a user
      tags:
        - Users
      responses:
        '201':
          description: User successfully added
          content:
            application/json:
              schema:
                type: object
                title: UserID
                properties:
                  user_id:
                    type: string
        '400':
          description: Request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: One or more user fields that should be unique are duplicated
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
    get:
      summary: Get a list of users
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/search_text'
      responses:
        '200':
          description: List of users found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{user_id}:
    parameters:
      - name: user_id
        description: Group ID (UUID) on which the operation should be performed
        in: path
        required: true
        schema:
          type: string
          minLength: 4
          maxLength: 400
    get:
      summary: Get information for a user by user_id
      tags:
        - Users
      responses:
        '200':
          description: User details returned successfully
          content:
            applicattion/json:
              schema:
                $ref: '#/components/schemas/UserExtended'
        '400':
          description: Request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
    put:
      summary: Update a user by user_id
      tags:
        - Users
      responses:
        '200':
          description: User updated successfully
        '400':
          description: Request error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
        required: true
    delete:
      summary: Delete a user by user_id
      tags:
        - Users
      responses:
        '204':
          description: User deleted successfully
        '400':
          description: Request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
tags:
  - name: Authentication
    description: APIs associated with application authentication
  - name: Users
    description: APIs for operations on users
  - name: Test Utilities
    description: APIs that should only be used by test utilities
  - name: Groups
    description: APIs for operations on groups
servers:
  - url: /api/v1
    description: Local development server
components:
  parameters:
    search_text:
      in: query
      name: search_text
      required: false
      description: String to filter search with
      schema:
        type: string
  schemas:
    Error:
      type: object
      properties:
        key:
          type: string
          description: Unique identifier for error message
        text:
          type: string
          description: Default english error message
        error_code:
          type: integer
          description: Error code (equivalent to HTTP status code)
    Login:
      type: object
      properties:
        username:
          type: string
          description: Username representing identity of person requesting access
          minLength: 4
          maxLength: 12
          example: testing
        password:
          type: string
          description: Password associated with the username requesting access
          minLength: 8
          maxLength: 32
          example: Testing123!
        token:
          type: string
          description: Facebook access token
          minLength: 8
          maxLength: 120
          example: KLSDJKFJF-LKSJFLKJSDFJ
    BrowserError:
      type: object
      required:
        - short_message
        - full_message
        - user_id
      properties:
        user_id:
          type: string
          description: Unique user identifier
          minLength: 2
          maxLength: 200
        short_message:
          type: string
          description: Short error message
          minLength: 2
          maxLength: 80
        full_message:
          type: string
          description: Full message (with stack trace)
          minLength: 2
          maxLength: 4000
    GroupShort:
      type: object
      x-wsag-create: Group
      description: Short representation of Group
      required:
        - name
      properties:
        group_id:
          type: string
          x-wsag-model-id: true
          nullable: false
          readOnly: true
          description: Unique group identifier
          example: SBDRF-SDRVJ-KSDFL-SDRFS
        gid:
          type: integer
          nullable: true
          description: Numeric group ID (LDAP)
          example: 104
        name:
          type: string
          description: Description of the group
          minLength: 4
          maxLength: 80
          example: app-users
    Group:
      type: object
      x-wsag-create: Group
      description: Named collection of users
      allOf:
        - $ref: '#/components/schemas/GroupShort'
        - type: object
          properties:
            description:
              type: string
              nullable: true
              description: Long description of group
              minLength: 20
              maxLength: 3000
              example: This is a really long description of a group
            source:
              type: string
              nullable: False
              description: Source of this group (Local or LDAP)
              enum:
                - Local
                - LDAP
              readOnly: true
              example: LDAP
            record_created:
              type: string
              format: date
              description: Record creation date
              readOnly: True
              example: '1995-08-19T00:00:00.000Z'
            record_updated:
              type: string
              format: date
              description: Record update date
              readOnly: true
              example: '1995-08-19T00:00:00.001Z'
    GroupFull:
      description: Group with all attributes
      x-wsag-extended: Group
      x-wsag-test-data: False
      allOf:
        - $ref: '#/components/schemas/Group'
        - type: array
          items:
            $ref: '#/components/schemas/UserShort'
    UserShort:
      type: object
      required:
        - username
      properties:
        user_id:
          type: string
          x-wsag-model-id: true
          description: Unique user identifier
          readOnly: True
        username:
          type: string
          description: Login user name
          minLength: 4
          maxLength: 32
          example: 'testing'
    UserCore:
      description: User
      type: object
      properties:
        email:
          type: string
          description: Email address
          pattern: ^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$
          minLength: 4
          maxLength: 80
          example: 'testing@wittlesouth.com'
        first_name:
          type: string
          description: First Name
          minLength: 2
          maxLength: 80
          example: 'Tester'
        full_name:
          type: string
          description: Full Name
          minLength: 5
          maxLength: 120
          example: 'Tester, Unit X'
        last_name:
          type: string
          description: Last Name
          minLength: 2
          maxLength: 80
          example: 'Unit'
        phone:
          type: string
          description: Phone number
          minLength: 10
          maxLength: 20
          example: '+1 (919) 999-9999'
        source:
          type: string
          nullable: False
          description: Source of this user
          enum:
            - Local
            - LDAP
            - Facebook
          readOnly: true
          example: LDAP
        record_created:
          type: string
          format: date
          description: Record creation date
          readOnly: True
          example: '1995-08-19T00:00:00.002Z'
        record_updated:
          type: string
          format: date
          description: Record update date
          readOnly: true
          example: '1995-08-19T00:00:00.003Z'
    User:
      x-wsag-create: User
      description: User
      x-wsag-test-data: False
      allOf:
        - $ref: '#/components/schemas/UserShort'
        - $ref: '#/components/schemas/UserCore'
    UserUpdate:
      x-wsag-create: User
      description: User
      x-wsag-test-data: False
      allOf:
        - $ref: '#/components/schemas/UserShort'
        - $ref: '#/components/schemas/UserCore'
        - type: object
          properties:
            password:
              type: string
              description: User password
              nullable: True
              minLength: 8
              maxLength: 32
              example: 'testing123'
    UserExtended:
      x-wsag-extended: User
      description: User with related objects list
      allOf:
        - $ref: '#/components/schemas/UserShort'
        - $ref: '#/components/schemas/UserCore'
        - type: array
          items:
            $ref: '#/components/schemas/Group'
