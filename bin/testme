#!/bin/bash

# Initialize variables that could be set by command line
nose_verbosity=2                  # -v: Default nose verbosity to one line per test (like mocha)
run_coverage=0                    # -c Default to not run code coverage, -c will turn on
run_integration=0                 # -i Defaults to not running integration tests, -i will turn on
run_nose=1                        # -n Default to running nose tests, -n will turn off
run_mocha=1                       # -m Default to running mocha tests, -m will turn off
nose_args='server/tests'          # -a: Optional additional argments to nosetests command
mocha_args='-- --recursive tests' # -b: Optional additional arguments to mocha command
cover_args=''                     # -d: Optional additional arguments to cover command

# Use getopts to parse arguments

while getopts "a:b:cd:imnv:" opt; do
    case "$opt" in
    a)  nose_args=$OPTARG
    ;;
    b)  mocha_args=$OPTARG
    ;;
    c)  run_coverage=1
    ;;
    d)  cover_args=$
    ;;
    i)  run_integration=1
    ;;
    m)  run_mocha=0
    ;;
    n)  run_nose=0
    ;;
    v)  nose_verbosity=$OPTARG
    esac
done

# Drop all processed args so $@ has leftovers
shift $((OPTIND-1))
[ "$1" = "--" ] && shift

# Uncomment these to debug command line argument processing
#echo "run_coverage=$run_coverage, run_mocha=$run_mocha, run_nose=$run_nose, nose_verbosity=$nose_verbosity"
#echo "nose_args=$nose_args"
#echo "2: mocha_args=$mocha_args"
#echo "cover_args=$cover_args"
#echo "leftovers: $@"

# Ensure that we have the basic environment defined
NODE_ENV='test'
source bin/app-env
echo "testme: TEST_URL = $TEST_URL"

# Shut the server down so that Kubernetes restarts the service

# Set variables we'll use to assess what is happening
server_running=0
nose_result=0
mocha_result=0

# If we're not running code coverage, run flask in debug
# mode. Debug mode screws up code coverage, and I'm not
# going to spend the time right now to find out why (7/10/17).
if [ "$run_coverage" -gt "0" ]; then
  export FLASK_DEBUG=0
else
  export FLASK_DEBUG=1
fi

# We want to define an environment indicating test
# Required for JavaScript code coverage to run, and
# also required to skip real ReCaptcha checks on 
# the server side
# export NODE_ENV=test

# Ensure pythonpah is set so module imports work
# Using . because this script assumes it is running
# with the project root as the current directory
export PYTHONPATH=$PYTHONPATH:./server

# If we're running any tests that require the server, clear the DB and re-start the API server
if [ "$run_nose" -gt "0" ] || [ "$run_integration" -gt "0" ]; then
  # Ensure that we have a clean database for the test run; will drop and recreate
  # the test database
  #mysql -u root --password=$MYSQL_ROOT_PASSWORD -h $TEST_HOST -P $MYSQL_PORT < bin/test-db-setup.sql
  echo "DROP DATABASE IF EXISTS muam;" | mysql -u root --password=$MYSQL_ROOT_PASSWORD -h $TEST_HOST -P $MYSQL_PORT
  echo "CREATE DATABASE muam CHARACTER SET utf8 collate utf8_general_ci;" | mysql -u root --password=$MYSQL_ROOT_PASSWORD -h $TEST_HOST -P $MYSQL_PORT
  echo "GRANT ALL on muam.* TO 'test'@'%';" | mysql -u root --password=$MYSQL_ROOT_PASSWORD -h $TEST_HOST -P $MYSQL_PORT

  # Issue the server shutdown command, which should cause the Kubernetes service
  # to restart, ensuring that we're running the most recent server code
  echo "export run_coverage=$run_coverage" > server/coverage/runType.bash
  echo "export COVERAGE_FILE='/coverage/server.coverage'" >> server/coverage/runType.bash
  if [ -f server/coverage/server.coverage ]; then
    rm server/coverage/server.coverage
  fi
  if [ - f server/coverage/coverage.report ]; then
    rm server/coverage/coverage.report
  fi
  echo "About to shut down server prior to test run with post to ${TEST_URL}/shutdown"
  curl -H "Content-type: application/json" -X POST -d '{"key":"Eric"}' ${TEST_URL}/shutdown
  echo "Starting api server on localhost at port $APPSERVER_SERVICE_PORT"

  # Loop looking for a response from the server API indicating it is up and running
  for i in {1..100}; do
    sleep 1
    if curl -H "Content-Type: application/json" -X POST -d '{"username": "junk", "password":"junk"}' $TEST_URL; then 
      server_running=1
      break
    fi
  done
  if [ "$server_running" -eq "0" ]; then
    echo "Unable to start server, check kubernetes pods"
    exit 10
  fi
fi

# If we're running the server, then add the testing user
if [ "$server_running" -gt "0" ]; then
  export ADD_USER=$(curl -H "Content-Type: application/json" -X POST -d '{"username": "testing", "password":"testing0", "email": "test@wittle.net", "phone": "9199999999", "first_name": "Test", "last_name": "User", "roles": "Admin", "reCaptchaResponse": "Nothing"}' ${TEST_URL}/users)
  echo "Add User returned $ADD_USER"
fi

# TEST_URL is used in both nose test and mocha tests now
echo "TEST_URL = $TEST_URL"

# If we are running nose tests, then do it
if [ "$run_nose" -gt "0" ] && [ "$server_running" -gt "0" ]; then
  # TEST_URL is required for nose tests, it needs to be constructed
  # the same way that baseUrl in fetchReduxAction() in
  # src/state/fetchStatus/fetchStatusActions.js.
  eval "server/bin/nosetests --verbosity=$nose_verbosity $nose_args"
  nose_result=$?
fi

# If we are running mocha tests, then do it
if [ "$run_mocha" -gt "0" ]; then
  export API_ROOT="http://127.0.0.1:${APPSERVER_SERVICE_PORT}${API_PATH}"
  echo "Set API_ROOT to $API_ROOT"
  echo "--> API_PATH = $API_PATH"

  if [ "$run_integration" -gt "0" ] && [ "$server_running" -gt 0 ]; then
    echo "Including integration tests for mocha"
    export INTEGRATION_TESTS='Yes'
  fi
  if [ "$run_coverage" -eq "1" ]; then
    # Since we're using istanbul in the configuration, NODE_ENV must equal test
    # if we want code coverage
    export MESSAGE_LEVEL=debug
    eval "cd web; npm run-script cover $mocha_args"
  else
    eval "cd web; npm run mocha $mocha_args"
  fi
  mocha_result=$?
fi

# If we started the server, and we're running coverage, send the command to shut down the api server
if [ "$server_running" -gt "0" ] && [ "$run_coverage" -gt "0" ]; then
  # Test is complete, so stop the test docker image
  echo "about to post shutdown to ${APPSERVER_SERVICE_PORT}"
  curl -H "Content-type: application/json" -X POST -d '{"key":"Eric"}' ${TEST_URL}/shutdown
fi

my_exit=0
if [ "$nose_result" -eq "0" ] && [ "$mocha_result" -eq "0" ]; then
  if [ "$run_coverage" -gt "0" ]; then
    if [ "$run_mocha" -gt "0" ]; then
      eval "cd .."
    fi
    sleep 3
    cat server/coverage/coverage.report
  fi
  echo "All tests successful!"
else
  my_exit=1
  echo "We have a problem: "
  if [ "$nose_result" -gt "0" ]; then
    echo "--> Failures in nose tests"
  fi
  if [ "$mocha_result" -gt "0" ]; then
    echo "--> Failures in mocha tests"
  fi
fi
exit $my_exit
